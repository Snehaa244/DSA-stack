#include <iostream>

using namespace std;

// Maximum size of the queue
const int MAX_SIZE = 100;

// Class for implementing a linear queue
class Queue {
private:
    int arr[MAX_SIZE];
    int front, rear;

public:
    // Constructor
    Queue() {
        front = -1;
        rear = -1;
    }

    // Function to check if the queue is empty
    bool isEmpty() {
        return (front == -1 && rear == -1);
    }

    // Function to check if the queue is full
    bool isFull() {
        return (rear == MAX_SIZE - 1);
    }

    // Function to enqueue (insert) an element into the queue
    void enqueue(int value) {
        if (isFull()) {
            cout << "Queue is full. Cannot enqueue." << endl;
            return;
        }
        if (isEmpty()) {
            front = 0; // Initialize front when the queue is empty
        }
        arr[++rear] = value;
        cout << "Enqueued: " << value << endl;
    }

    // Function to dequeue (remove) an element from the queue
    int dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty. Cannot dequeue." << endl;
            return -1;
        }
        int dequeuedValue = arr[front];
        if (front == rear) {
            // Reset front and rear when the queue has only one element
            front = -1;
            rear = -1;
        } else {
            front++;
        }
        cout << "Dequeued: " << dequeuedValue << endl;
        return dequeuedValue;
    }

    // Function to display the elements of the queue
    void display() {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return;
        }
        cout << "Queue elements: ";
        for (int i = front; i <= rear; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Queue myQueue;

    myQueue.enqueue(10);
    myQueue.enqueue(20);
    myQueue.enqueue(30);
    myQueue.enqueue(40);
    myQueue.enqueue(50);

    myQueue.display();

    myQueue.dequeue();
    myQueue.dequeue();

    myQueue.display();

    return 0;
}
