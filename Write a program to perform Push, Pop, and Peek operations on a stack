#include <iostream>
#include <stdexcept>

using namespace std;

// Define the maximum size of the stack
const int MAX_SIZE = 100;

// Stack class
class Stack {
private:
    int arr[MAX_SIZE];
    int top;

public:
    // Constructor
    Stack() {
        top = -1; // Initialize top of the stack
    }

    // Push operation: Add an element to the top of the stack
    void push(int value) {
        if (top == MAX_SIZE - 1) {
            throw overflow_error("Stack Overflow");
        }
        arr[++top] = value;
        cout << "Pushed " << value << " to the stack." << endl;
    }

    // Pop operation: Remove the top element from the stack
    void pop() {
        if (top == -1) {
            throw underflow_error("Stack Underflow");
        }
        cout << "Popped " << arr[top--] << " from the stack." << endl;
    }

    // Peek operation: Return the top element of the stack without removing it
    int peek() {
        if (top == -1) {
            throw underflow_error("Stack Underflow");
        }
        return arr[top];
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == -1;
    }
};

int main() {
    Stack stack;

    try {
        stack.push(1);
        stack.push(2);
        stack.push(3);
        stack.push(4);

        cout << "Top element of the stack: " << stack.peek() << endl;

        while (!stack.isEmpty()) {
            stack.pop();
        }

        // Trying to pop from an empty stack should throw an exception
        stack.pop();
    } catch (const exception& e) {
        cerr << "Exception: " << e.what() << endl;
    }

    return 0;
}
