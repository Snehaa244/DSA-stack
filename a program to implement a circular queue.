#include <iostream>

using namespace std;

// Maximum size of the circular queue
const int MAX_SIZE = 5;

// Class for implementing a circular queue
class CircularQueue {
private:
    int arr[MAX_SIZE];
    int front, rear;

public:
    // Constructor
    CircularQueue() {
        front = -1;
        rear = -1;
    }

    // Function to check if the circular queue is empty
    bool isEmpty() {
        return (front == -1 && rear == -1);
    }

    // Function to check if the circular queue is full
    bool isFull() {
        return (front == (rear + 1) % MAX_SIZE);
    }

    // Function to enqueue (insert) an element into the circular queue
    void enqueue(int value) {
        if (isFull()) {
            cout << "Circular Queue is full. Cannot enqueue." << endl;
            return;
        }
        if (isEmpty()) {
            front = 0;
            rear = 0;
        } else {
            rear = (rear + 1) % MAX_SIZE;
        }
        arr[rear] = value;
        cout << "Enqueued: " << value << endl;
    }

    // Function to dequeue (remove) an element from the circular queue
    int dequeue() {
        if (isEmpty()) {
            cout << "Circular Queue is empty. Cannot dequeue." << endl;
            return -1;
        }
        int dequeuedValue = arr[front];
        if (front == rear) {
            // Reset front and rear when the queue has only one element
            front = -1;
            rear = -1;
        } else {
            front = (front + 1) % MAX_SIZE;
        }
        cout << "Dequeued: " << dequeuedValue << endl;
        return dequeuedValue;
    }

    // Function to display the elements of the circular queue
    void display() {
        if (isEmpty()) {
            cout << "Circular Queue is empty." << endl;
            return;
        }
        cout << "Circular Queue elements: ";
        int i = front;
        while (i != rear) {
            cout << arr[i] << " ";
            i = (i + 1) % MAX_SIZE;
        }
        cout << arr[rear] << endl;
    }
};

int main() {
    CircularQueue myCircularQueue;

    myCircularQueue.enqueue(10);
    myCircularQueue.enqueue(20);
    myCircularQueue.enqueue(30);
    myCircularQueue.enqueue(40);
    myCircularQueue.enqueue(50);

    myCircularQueue.display();

    myCircularQueue.dequeue();
    myCircularQueue.dequeue();

    myCircularQueue.display();

    return 0;
}
