#include <iostream>
#include <stack>
#include <string>
#include <unordered_map>

using namespace std;

// Function to check if the character is an operator
bool isOperator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/';
}

// Function to get the precedence of the operator
int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    return 0; // Parentheses have the lowest precedence
}

// Function to convert infix expression to postfix notation
string infixToPostfix(string infix) {
    stack<char> operators;
    string postfix;
    
    for (char ch : infix) {
        if (ch == ' ') {
            continue;
        } else if (isdigit(ch) || isalpha(ch)) {
            postfix += ch;
        } else if (ch == '(') {
            operators.push(ch);
        } else if (ch == ')') {
            while (!operators.empty() && operators.top() != '(') {
                postfix += operators.top();
                operators.pop();
            }
            operators.pop(); // Pop '('
        } else if (isOperator(ch)) {
            while (!operators.empty() && precedence(operators.top()) >= precedence(ch)) {
                postfix += operators.top();
                operators.pop();
            }
            operators.push(ch);
        }
    }

    // Pop remaining operators from stack to postfix
    while (!operators.empty()) {
        postfix += operators.top();
        operators.pop();
    }

    return postfix;
}

int main() {
    string infixExpression;

    // Input infix expression
    cout << "Enter the infix expression: ";
    getline(cin, infixExpression);

    // Convert infix expression to postfix
    string postfixExpression = infixToPostfix(infixExpression);

    // Output postfix expression
    cout << "Postfix expression: " << postfixExpression << endl;

    return 0;
}
